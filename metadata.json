{
  "name": "copperegg",
  "description": "Installs/Configures CopperEgg services",
  "long_description": "Chef Cookbook for CopperEgg services\n===========\n* Chef cookbook for the CopperEgg collector agent and website / port probes.\n* Requires a CopperEgg account to use.  [Free trial available](https://app.copperegg.com/signup).\n\nRequirements\n============\nChef 10 and up.\n\nPlatform\n========\n* Any Linux 2.6+ OS, including: Ubuntu, Debian, Vyatta, RedHat Enterprise, CentOS, Fedora, Amazon, SuSE, openSuSE, Gentoo, and many derivatives.\n* Windows \n\nAttributes\n==========\n* `default[:copperegg][:apikey]` = Your API Key available from the [CopperEgg App Settings Page](https://app.copperegg.com/#settings/site).\n* `default[:copperegg][:tags]` = A comma separated list of tags to apply.  Optional.  [Manage your tags](https://app.copperegg.com/#revealcloud/tags).\n* `default[:copperegg][:label]` = Label to apply in place of hostname when displaying in the dashboard.  WARNING: If you want the same label applied to multiple systems, you may want to consider tags instead.  This is most useful if you intend a recipe for a single server.  Optional.\n* `default[:copperegg][:oom_protect]` = Flag for determining if the Linux Out Of Memory manager (OOM) should be allowed to kill the RevealCloud process. Default false (allow OOM to kill the process). Optional.\n* `default[:copperegg][:proxy]` = Proxy server required to talk to the revealcloud api servers, such as `myproxy.mycorp.com:8080`.  Optional.  Leave blank unless you know what you are doing.\n* `default[:copperegg][:use_fqdn] = Flag for using the fqdn as the uuid. true  => Agent will be started with -U node.fqdn . Default false. Optional.\n* `default[:copperegg][:include_chef_tags]` = Propagate Chef node tags to CopperEgg tags. Default true.\n* `default[:copperegg][:include_roles_astags]` = Propagate Chef node Roles to CopperEgg tags. Default true.\n* `default[:copperegg][:include_env_astag]` = Propagate the Chef environment to a CopperEgg tag. Default true.\n* `default[:copperegg][:annotate_chefrun_success]` = Send CopperEgg an annotation for each successful chef run. Default false.\n* `default[:copperegg][:annotate_chefrun_fail]` = Send CopperEgg an annotation for each failed chef run. Default true.\n\n\nUsage\n=====\n1. Download into your chef-repo, either manually from the community chef webpage or:\n* `knife cookbook site download copperegg`\n2. Set your apikey as described in the `Attributes` section.\n* edit `copperegg/attributes/default.rb` and change YOUR_USER_API_KEY to be correct.\n3. Set any other optional attributes described above, as desired.\n4. Upload the cookbook to your chef server or hosted chef:\n* `knife cookbook upload -a -o copperegg`\n5. Include `recipe[revealcloud]` in the run_list for all of your servers.\n* `knife node run_list add NODES 'recipe[copperegg]'`\n6. Run chef-client on your nodes in whatever manner suits you, such as `sudo chef-client` or a batch job.\n7. View your systems within 10 seconds in the [RevealCloud App](https://app.copperegg.com/#revealcloud/overview)\n\n\nCreating and managing website and port probes\n=====\n1. The CopperEgg Cookbook contains a LightWeight Resource Provider (LWRP) for simplifying the automation of CopperEgg probes.  \n2. To create a copperegg probe, you need to include something similar to the following example:  \n\n```ruby\n  copperegg_probe \"ChefProbe2\" do\n    provider \"copperegg_probe\"\n    action :update                        # update will create or update\n    probe_desc 'ChefProbe2'               # the 'name' of the probe\n    probe_dest \"http://yoursite.com\"      # the URL to test\n    type 'GET'                            # the test type; in this case, an HTTP GET request\n    stations ['dal','nrk']                # override the defaults and specify testing from Dallas and Fremont\n  end \n```  \n\n3. You can find descriptions of all required and optional fields in copperegg/resources/probe.rb.\n4. Refer to the Probe section of the CopperEgg API for further details:  [CopperEgg Probe API](http://dev.copperegg.com/revealuptime/probes.html)\n\n\nCreating Annotations in the CopperEgg UI for chef run events.\n=====\n1. The CopperEgg Cookbook includes integration with the Chef Report and Exception Handlers. To enable this functionality:\n* include the chef_handler cookbook from Opscode in your chef repo, and in your run list.\n* include the recipe copperegg-handler.rb in your run list. That's it!\n* By default, each chef run will create a annotation at copperegg only when the chef run fails. \n* You can change this behavior by changing the [:copperegg][:annotate_chefrun_success] and [:copperegg][:annotate_chefrun_fail] attributes.\n\n\nLinks\n=====\n* [CopperEgg Homepage](http://www.copperegg.com)\n* [CopperEgg Signup](https://app.copperegg.com/signup)\n* [CopperEgg Login](https://app.copperegg.com/login)\n\n\nLicense and Author\n==================\nAuthors:: Ross Dickey, Scott Johnson\n\n(The MIT License)\n\nCopyright Â© 2013 [CopperEgg Corporation](http://copperegg.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without\nlimitation the rights to use, copy, modify, merge, publish, distribute,\nsublicense, and/or sell copies of the Software, and to permit persons\nto whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n",
  "maintainer": "CopperEgg, Inc.",
  "maintainer_email": "support@copperegg.com",
  "license": "MIT",
  "platforms": {
    "linux": ">= 2.6.9",
    "ubuntu": ">= 8.04",
    "debian": ">= 5.0",
    "vyatta": ">= 0.0.0",
    "redhat": ">= 5.0",
    "centos": ">= 5.0",
    "fedora": ">= 14.0",
    "amazon": ">= 2011.02.1",
    "suse": ">= 11.0",
    "opensuse": ">= 11.0",
    "gentoo": ">= 1.12",
    "windows": ">= 0.0.0"
  },
  "dependencies": {
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
    "copperegg::default": "Installs CopperEgg collector binary"
  },
  "version": "0.1.9"
}